import *"react"import { Check, ChevronDown } from "lucide-react"import { cn } from "@/lib/utils"import { Button } from "@/components/ui/button"import {  Command,  CommandEmpty,  CommandGroup,  CommandInput,  CommandItem,} from "@/components/ui/command"import {  Popover,  PopoverContent,  PopoverTrigger,} from "@/components/ui/popover"  value: string  label: string  icon?: React.ComponentType<{ className?: string }>  [key: string]: any}export function Selector({  options,  value,  onValueChange,  placeholder = "Select an option",  emptyText = "No results found.",  searchPlaceholder = "Search...",  className,  buttonClassName,  popoverClassName,  disabled = false,  renderOption,  renderValue,}) {  const [open, setOpen] = React.useState(false)  const selectedOption = options.find((option) => option.value === value)  return (    <Popover open={open} onOpenChange={setOpen}>      <PopoverTrigger asChild>        <Button          variant="outline"          role="combobox"          aria-expanded={open}          className={cn("w-full justify-between", buttonClassName)}          disabled={disabled}        >          <div className="flex items-center overflow-hidden">            {selectedOption?.icon && (              <selectedOption.icon className="mr-2 h-4 w-4 shrink-0 opacity-50" />            )}            {selectedOption ? (              <span className="truncate">                {renderValue                  ? renderValue(selectedOption)                  : renderOption                  ? renderOption(selectedOption)                  : selectedOption.label}              </span>            ) : (              <span className="text-muted-foreground">{placeholder}</span>            )}          </div>          <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />        </Button>      </PopoverTrigger>      <PopoverContent        className={cn("w-[--radix-popover-trigger-width] p-0", popoverClassName)}        align="start"      >        <Command className={className}>          <CommandInput placeholder={searchPlaceholder} className="h-9" />          {emptyText}</CommandEmpty>          <CommandGroup className="max-h-[300px] overflow-y-auto">            {options.map((option) => (              <CommandItem                key={option.value}                value={option.value}                onSelect={() => {                  onValueChange(option.value, option)                  setOpen(false)                }}                className="cursor-pointer"              >                <div className="flex w-full items-center">                  {option.icon && (                    <option.icon className="mr-2 h-4 w-4 text-muted-foreground" />                  )}                  <span className="flex-1">                    {renderOption ? renderOption(option) : option.label}                  </span>                  <Check                    className={cn(                      "ml-2 h-4 w-4 shrink-0",                      value === option.value ? "opacity-100" : "opacity-0"                    )}                  />                </div>              </CommandItem>            ))}          </CommandGroup>        </Command>      </PopoverContent>    </Popover>  )}